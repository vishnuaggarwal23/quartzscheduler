plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'war'
    id 'idea'
    id 'eclipse'
    id 'eclipse-wtp'
    id 'application'
    id 'project-report'
}

ext {
    set('springBootAdminVersion', "2.2.4")
    set('projectGroup', 'wrapper.quartz.scheduler')
    set('projectVersion', '0.0.1-SNAPSHOT')
    set('javaVersion', '1.8')
}

group = "${projectGroup}"
version = "${projectVersion}"
sourceCompatibility = "${javaVersion}"
mainClassName = "${projectGroup}.Application"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.session:spring-session-jdbc'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2', {
        exclude module: "HikariCP-java7"
    }
    implementation group: 'com.cronutils', name: 'cron-utils', version: '9.1.1'
    implementation 'org.springframework:spring-context-support'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'com.mchange', name: 'c3p0', version: '0.9.5.5'
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.10.3'
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.2'
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.2'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.8'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.1'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'commons-net', name: 'commons-net', version: '3.7'
    implementation group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    implementation group: 'org.apache.commons', name: 'commons-email', version: '1.5'
    implementation group: 'commons-daemon', name: 'commons-daemon', version: '1.2.2'
    implementation group: 'joda-time', name: 'joda-time', version: '2.10.6'
    implementation group: 'org.joda', name: 'joda-convert', version: '2.2.1'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1'
    implementation group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    implementation group: 'com.google.code.findbugs', name: 'findbugs-annotations', version: '3.0.1'
    implementation group: 'org.javassist', name: 'javassist', version: '3.27.0-GA'
    implementation group: 'org.jetbrains', name: 'annotations', version: '19.0.0'
    implementation group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.4.0'

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

['jar', 'bootJar', 'bootWar'].each { String task ->
    tasks.findByName(task).setEnabled(false)
}

bootRun {
    sourceResources sourceSets.main
    systemProperties properties as Map<String, ?>
    jvmArgs = [
            "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
    ]
}

test {
    useJUnitPlatform()
}

wrapper {
    distributionType(Wrapper.DistributionType.ALL)
}

war {
    dependsOn("buildInfoTask")
    mustRunAfter("buildInfoTask")
    enabled = true
    baseName = "quartz-scheduler-rest-back-end"
    archivesBaseName = "quartz-scheduler-rest-back-end"
    version = "${projectVersion}"
    archiveVersion = "${projectVersion}"
}

class BuildInfoTask extends DefaultTask {
    @TaskAction
    void printMe() {
        File buildFile = new File("${project.getProjectDir()}/src/main/resources/${project.getName()}_buildInfoFile.properties")
        if (buildFile.exists()) {
            buildFile.delete()
        }
        buildFile.createNewFile()
        buildFile << "buildDate=${new Date().toInstant().toString()}\nbuildName=${project.getName()}\nbuildVersion=${project.getVersion()}"
    }
}

tasks.register("buildInfoTask", BuildInfoTask)
