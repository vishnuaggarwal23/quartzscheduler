class BuildInfoTask extends DefaultTask {

    @TaskAction
    void printMe() {
        File buildFile = new File("${project.getProjectDir()}/src/main/resources/${project.getName()}_buildInfoFile.properties")
        if (buildFile.exists()) {
            buildFile.delete()
        }
        buildFile.createNewFile()
        buildFile << "buildDate=${new Date().toInstant().toString()}" +
                "\nbuildName=${project.getName()}" +
                "\nbuildVersion=${project.getVersion()}"
    }
}

configure(allprojects) { Project project ->
    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
            classpath "org.springframework:springloaded:${springLoadedVersion}"
        }
    }

    apply plugin: 'java'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'application'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    sourceCompatibility = javaSourceVersion
    targetCompatibility = javaTargetVersion

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    wrapper {
        gradleVersion = gradleVersion
        distributionType = Wrapper.DistributionType.ALL
    }

    configurations {
        all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group.equals("org.springframework.boot")) {
                        if (!details.requested.name.equals("spring-boot-starter-mobile")) {
                            details.useVersion("$springBootVersion")
                        }
                    }
                    if (details.requested.group.equals("org.springframework.security")) {
                        details.useVersion("$springSecurityVersion")
                    }
                    if (details.requested.group.equals("org.springframework")) {
                        details.useVersion("$springVersion")
                    }
//                if (details.requested.group.equals("com.zaxxer") && details.requested.name.startsWith("HikariCP")) {
//                    details.use
//                }
                }
            }
        }
    }

    tasks.register("buildInfoTask", BuildInfoTask)

    group = projectGroup

    dependencies {
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    }
}