allprojects {
    ext {
        springBootVersion = springBootVersion
        springVersion = springVersion
        springSecurityVersion = springSecurityVersion
        jdkSource = javaSourceVersion
        jdkTarget = javaTargetVersion
        springLoadedVersion = springLoadedVersion
        gradleVersion = gradleVersion
        projectGroup = projectGroup
        coreModuleProjectBaseName = coreModuleProjectBaseName
        coreModuleProjectVersion = coreModuleProjectVersion
        adminModuleProjectBaseName = adminModuleProjectBaseName
        adminModuleProjectVersion = adminModuleProjectVersion
        restModuleProjectBaseName = restModuleProjectBaseName
        restModuleProjectVersion = restModuleProjectVersion
    }
    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
            classpath "org.springframework:springloaded:${springLoadedVersion}"
        }
    }

    apply plugin: 'java'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'application'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'war'
    apply plugin: 'project-report'

    sourceCompatibility = jdkSource
    targetCompatibility = jdkTarget

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    task wrapper(type: Wrapper) {
        gradleVersion = gradleVersion
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group.equals("org.springframework.boot")) {
                    if (!details.requested.name.equals("spring-boot-starter-mobile")) {
                        details.useVersion("$springBootVersion")
                    }
                }
                if (details.requested.group.equals("org.springframework.security")) {
                    details.useVersion("$springSecurityVersion")
                }
                if (details.requested.group.equals("org.springframework")) {
                    details.useVersion("$springVersion")
                }
            }
        }
    }
}